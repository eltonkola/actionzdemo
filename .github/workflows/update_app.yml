name: UpdateApplication

on:
 # schedule:
 # - cron: '0 9 * * *'  # every day at 9
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: main

      - name: Version Bump
        run: |
          echo "---set credentials---"
          git config credential.helper 'cache --timeout=120'
          git config user.email "eltonkola@gmail.com"
          git config user.name "Deployment Bot"
          echo "---get data---"
          git pull
          git checkout production
          git checkout main
          
          #update version and push
          
          #get todays month
          TODAYS_MONTH=$(date +%m)
          #get current versions
          VERSION_MAJOR=$(./demoApp/gradlew -p demoApp -q app:printVersionMajor | tail -n 1)
          VERSION_MINOR=$(./demoApp/gradlew -p demoApp -q app:printVersionMinor | tail -n 1)

          #****************************
          #update versions
          echo "*********** current values ***********"
          echo "Aspected month is: $ASPECTED_MONTH"
          echo "Current month is: $TODAYS_MONTH"
          echo "old VERSION_MAJOR: $VERSION_MAJOR"
          echo "old VERSION_MINOR: $VERSION_MINOR"

          ASPECTED_MONTH=$((x=VERSION_MAJOR,y=12,z=x%y))

          if [ ASPECTED_MONTH==TODAYS_MONTH ]
          then
            VERSION_MINOR=$((VERSION_MINOR+1))
          else
            VERSION_MAJOR=$((VERSION_MAJOR+1))
          fi

          echo "*********** update ***********"
          echo "new VERSION_MAJOR: $VERSION_MAJOR"
          echo "new VERSION_MINOR: $VERSION_MINOR"

          filename="demoApp/buildsystem/config.gradle"
          if test -f "$filename"; then
           echo "$filename exists."
          else
           echo "$filename does not exist."
          fi

          #write the new version on the config file
          replaceMajor="        versionMajor : $VERSION_MAJOR,"
          replaceMinor="        versionMinor : $VERSION_MINOR,"
          sed -i  "4s/.*/$replaceMajor/" $filename
          sed -i  "5s/.*/$replaceMinor/" $filename

          git add $filename
          git commit -m "version bump"
          git push
   
     
            
      - name: Create pr
        run: |

          DIFF_DESCRIPTION=$(git log --merges --pretty=format:%b production..development)
          #this will sanitize the log, but will look like $'Log', we will need to clear them below
          CLEAN=$(printf '%q\n' "$DIFF_DESCRIPTION")
          #this clears the final ''
          CLEAN=${CLEAN%?}
          #this removes the first 2 charachters
          CHANGES=$(echo $CLEAN | awk '{print substr($0,3)}')
          echo "*************DIFF_DESCRIPTION***************"
          echo $CHANGES
          echo "********************************************"
          
          curl -v -u "eltonkola:${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -X POST https://api.github.com/repos/eltonkola/actionzdemo/pulls \
              -d "{\"title\":\"Application release \", \"body\": \"Changelog: wip\", \"head\":\"main\",\"base\":\"production\"}"
      
          echo Done!


      - name: Slack report
        uses: kpritam/slack-job-status-action@v1
        with:
            job-status: ${{ job.status }}
            slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
            channel: general



 
 
 
